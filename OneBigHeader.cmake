FILE(GLOB sources "${PROJECT_SOURCE_DIR}/src/*")
list(REVERSE sources)
list(LENGTH sources len_sources)
set(HEADER_NAME "simulator.hpp")

file(REMOVE "${HEADER_NAME}")
STRING(LENGTH "${PROJECT_SOURCE_DIR}/src/" lenvar)
set(aproved_sources "")
foreach( aux RANGE ${len_sources} )
    foreach( src_file ${sources} )
        string(SUBSTRING "${src_file}" ${lenvar} -1 only_header)
        list(FIND aproved_sources "${only_header}" found)
        if(NOT (found EQUAL -1))
            continue()
        endif()
        
        file(STRINGS "${src_file}" header_str)
        set (is_valid TRUE)
        foreach(LINE IN LISTS header_str)
            if(LINE MATCHES "#include \"")
                set (is_valid FALSE)
                foreach(header ${aproved_sources})
                    if(LINE MATCHES "${header}")
                        set (is_valid TRUE)
                    endif()
                endforeach(header ${aproved_sources})
                if(NOT is_valid)
                    break()
                endif()
            endif()
        endforeach()
        if(is_valid)
            string(SUBSTRING "${src_file}" ${lenvar} -1 only_header)
            LIST(APPEND aproved_sources 
            "${only_header}"
            )
        endif()
    endforeach( src_file ${sources} )
#    foreach( src_file ${aproved_sources} )
 #      LIST(REMOVE_ITEM sources ${src_file})
 #   endforeach( src_file ${aproved_sources} )

    
    MESSAGE(STATUS "${aproved_sources}")
endforeach()
foreach(header ${aproved_sources})
    file(READ "${PROJECT_SOURCE_DIR}/src/${header}" aux)
    file(APPEND ${HEADER_NAME} "${aux}\n")
#    foreach(line ${aux})
#        list(APPEND headers_str
#                "${line}"
#            )
#    endforeach()
endforeach(header ${aproved_sources})

file(READ ${HEADER_NAME} filedata)
string(REGEX REPLACE "#include \"" "// #include \"" filedata "${filedata}")
file(WRITE  ${HEADER_NAME} "${filedata}")

#SET(beg FALSE)
#foreach(LINE IN LISTS headers_str)
#    string(REGEX REPLACE "#include \"" "// #include \"" LINE ${LINE})
#    STRING(REGEX MATCHALL "\"" veces "${LINE}")
#   list(LENGTH veces n_matches)
#   math(EXPR odd "${n_matches}%2")
#   if(odd EQUAL 1)
#        if(beg)
#            set(LINE "\" ${LINE}")
#            SET(beg FALSE)
#        else()
#            SET(beg TRUE)
#            set(LINE "${LINE} \"")
#        endif() 
#   endif()
#    file(APPEND "${HEADER_NAME}" "${LINE}\n")
#endforeach()